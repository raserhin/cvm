# generated by datamodel-codegen:
#   filename:  cvm-route.json

from __future__ import annotations

from typing import Optional, Union

from pydantic import BaseModel, Extra, Field, conint


class Addr(BaseModel):
    __root__: str = Field(
        ...,
        description="A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
    )


class AssetId(BaseModel):
    __root__: str = Field(
        ...,
        description='Newtype for XCVM assets ID. Must be unique for each asset and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.',
    )


class Native(BaseModel):
    denom: str


class AssetReference1(BaseModel):
    """
    Definition of an asset native to some chain to operate on. For example for Cosmos CW and EVM chains both CW20 and ERC20 can be actual. So if asset is local or only remote to some chain depends on context of network or connection. this design leads to some dummy matches, but in general unifies code (so that if one have to solve other chain route it can)
    """

    class Config:
        extra = Extra.forbid

    native: Native


class Cw20(BaseModel):
    contract: Addr


class AssetReference2(BaseModel):
    """
    Definition of an asset native to some chain to operate on. For example for Cosmos CW and EVM chains both CW20 and ERC20 can be actual. So if asset is local or only remote to some chain depends on context of network or connection. this design leads to some dummy matches, but in general unifies code (so that if one have to solve other chain route it can)
    """

    class Config:
        extra = Extra.forbid

    cw20: Cw20


class AssetReference(BaseModel):
    __root__: Union[AssetReference1, AssetReference2] = Field(
        ...,
        description='Definition of an asset native to some chain to operate on. For example for Cosmos CW and EVM chains both CW20 and ERC20 can be actual. So if asset is local or only remote to some chain depends on context of network or connection. this design leads to some dummy matches, but in general unifies code (so that if one have to solve other chain route it can)',
    )


class ChannelId(BaseModel):
    __root__: str


class ConnectionId(BaseModel):
    __root__: str


class DisplayedForUint128(BaseModel):
    __root__: str = Field(
        ...,
        description='A wrapper around a type which is serde-serialised as a string.\n\nFor serde-serialisation to be implemented for the type `T` must implement `Display` and `FromStr` traits.\n\n```rust use cvm::shared::Displayed;\n\n#[derive(serde::Serialize, serde::Deserialize)] struct Foo { value: Displayed<u64> }\n\nlet encoded = serde_json_wasm::to_string(&Foo { value: Displayed(42) }).unwrap(); assert_eq!(r#"{"value":"42"}"#, encoded);\n\nlet decoded = serde_json_wasm::from_str::<Foo>(r#"{"value":"42"}"#).unwrap(); assert_eq!(Displayed(42), decoded.value); ```',
    )


class AstroportRouterContract(BaseModel):
    address: Addr
    token_a: str
    token_b: str


class ExchangeType1(BaseModel):
    class Config:
        extra = Extra.forbid

    astroport_router_contract: AstroportRouterContract


class ExchangeType(BaseModel):
    __root__: ExchangeType1


class IbcEndpoint(BaseModel):
    channel_id: str
    port_id: str


class IcsPair(BaseModel):
    """
    we need both, so we can unwrap
    """

    sink: ChannelId
    source: ChannelId


class NetworkId(BaseModel):
    __root__: conint(ge=0) = Field(
        ...,
        description='Newtype for XCVM networks ID. Must be unique for each network and must never change. This ID is an opaque, arbitrary type from the XCVM protocol and no assumption must be made on how it is computed.',
    )


class PrefixedDenom(BaseModel):
    """
    A type that contains the base denomination for ICS20 and the source tracing information path.
    """

    base_denom: str = Field(
        ..., description='Base denomination of the relayed fungible token.'
    )
    trace_path: str = Field(
        ...,
        description='A series of `{port-id}/{channel-id}`s for tracing the source of the token.',
    )


class RelativeTimeout1(BaseModel):
    """
    Timeout is relative to the current block timestamp of counter party
    """

    class Config:
        extra = Extra.forbid

    seconds: conint(ge=0)


class RelativeTimeout(BaseModel):
    __root__: RelativeTimeout1 = Field(
        ...,
        description='relative timeout to CW/IBC-rs time. very small, assumed messages are arriving fast enough, like less than hours',
    )


class ChannelInfo(BaseModel):
    """
    Information associated with an IBC channel.
    """

    connection_id: ConnectionId = Field(
        ...,
        description='the connection this exists on (you can use to query client/consensus info)',
    )
    counterparty_endpoint: IbcEndpoint = Field(
        ..., description='the remote channel/port we connect to'
    )
    id: ChannelId = Field(..., description='id of this channel')


class ExchangeItem(BaseModel):
    """
    allows to execute Exchange instruction
    """

    exchange: ExchangeType
    exchange_id: DisplayedForUint128
    network_id: NetworkId


class ForeignAssetId1(BaseModel):
    class Config:
        extra = Extra.forbid

    ibc_ics20: PrefixedDenom


class ForeignAssetId(BaseModel):
    __root__: ForeignAssetId1


class OtherNetworkItem(BaseModel):
    counterparty_timeout: RelativeTimeout = Field(
        ..., description='default timeout to use for direct send'
    )
    ics27_channel: Optional[ChannelInfo] = Field(
        None, description='if there is ICS27 IBC channel opened'
    )
    ics_20: Optional[IcsPair] = None
    use_shortcut: Optional[bool] = Field(
        None,
        description='if true, than will use shortcuts for example, if program transfer only program will just use native transfer or if connection supports exchange, it will use exchange default is false if target chain has CVM gateway',
    )


class CvmRouteSchema3(BaseModel):
    class Config:
        extra = Extra.forbid

    ExchangeItem: ExchangeItem


class BridgeAsset(BaseModel):
    location_on_network: ForeignAssetId


class NetworkToNetwork(BaseModel):
    from_: NetworkId = Field(..., alias='from')
    other: OtherNetworkItem = Field(..., description='on `to` chain')
    to: NetworkId


class CvmRouteSchema1(BaseModel):
    class Config:
        extra = Extra.forbid

    NetworkToNetwork: NetworkToNetwork


class AssetItem(BaseModel):
    asset_id: AssetId
    bridged: Optional[BridgeAsset] = Field(
        None,
        description='if asset was bridged, it would have way to identify bridge/source/channel',
    )
    local: AssetReference
    network_id: NetworkId = Field(
        ..., description='network id on which this asset id can be used locally'
    )


class CvmRouteSchema2(BaseModel):
    class Config:
        extra = Extra.forbid

    AssetToNetwork: AssetItem


class CvmRouteSchema(BaseModel):
    __root__: Union[CvmRouteSchema1, CvmRouteSchema2, CvmRouteSchema3] = Field(
        ..., title='CvmRouteSchema'
    )
