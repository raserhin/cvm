# generated by datamodel-codegen:
#   filename:  neutron_pools.json

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Asset(BaseModel):
    id: str
    address: str
    amount: str
    symbol: str


class AstroRewards(BaseModel):
    apr: float
    apy: float
    day: float


class Config(BaseModel):
    migrateToAddress: Optional[str]


class MarketStats(BaseModel):
    lastSwapPrice: float
    token0DayVolume: float
    token0Name: str
    token0Symbol: str
    token1DayVolume: float
    token1Name: str
    token1Symbol: str


class Prices(BaseModel):
    token1Address: str
    token1PriceUsd: float
    token2Address: str
    token2PriceUsd: float


class ProtocolRewards(BaseModel):
    apr: float
    apy: float
    day: float


class TotalRewards(BaseModel):
    apr: float
    apy: int
    day: Union[float, str]


class TradingFees(BaseModel):
    apr: int
    apy: float
    day: Union[float, str]


class PoolParams(BaseModel):
    mid_fee: str
    out_fee: str
    fee_gamma: str
    repeg_profit_threshold: str
    min_price_scale_delta: str
    ma_half_time: int


class Initial(BaseModel):
    amp: str
    gamma: str


class Future(BaseModel):
    amp: str
    gamma: str


class PriceState(BaseModel):
    oracle_price: str
    last_price: str
    price_scale: str
    last_price_update: int
    xcp_profit: str
    xcp_profit_real: str


class PoolState(BaseModel):
    initial: Initial
    future: Future
    future_time: int
    initial_time: int
    price_state: PriceState


class PoolConfig(BaseModel):
    block_time_last: int
    price0_cumulative_last: Optional[str] = None
    price1_cumulative_last: Optional[str] = None
    pool_params: Optional[PoolParams] = None
    pool_state: Optional[PoolState] = None
    init_amp: Optional[int] = None
    init_amp_time: Optional[int] = None
    next_amp: Optional[int] = None
    next_amp_time: Optional[int] = None


class JsonItem(BaseModel):
    assets: List[Asset]
    astroRewards: AstroRewards
    config: Optional[Config]
    marketStats: Optional[MarketStats]
    prices: Prices
    protocolRewards: ProtocolRewards
    totalRewards: TotalRewards
    tradingFees: TradingFees
    chainId: str
    dayVolumeUsd: float
    deregistered: None
    feeRate: List[str]
    lpAddress: str
    pairName: Optional[str]
    poolAddress: str
    poolDescription: str
    poolLiquidity: int
    poolLiquidityUsd: float
    poolType: str
    rewardTokenSymbol: Optional[str]
    stakeable: bool
    tags: List[str]
    token0Address: str
    token1Address: str
    poolConfig: PoolConfig
    isBlocked: bool
    name: str
    isNew: bool
    isIlliquid: bool
    isDeregistered: bool
    sortingAssets: List[str]


class Model(BaseModel):
    json_: List[JsonItem] = Field(..., alias='json')
